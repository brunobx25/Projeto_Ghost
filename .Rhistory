library(pacman)
pacman::p_load(tidyverse, gt, readxl, scales, forcats)
# lendo os arquivos xlsx e suas respectivas abas
atenas <- read_xlsx("C:/Users/Bruno/OneDrive/Documentos/GitHub/Projeto_Ghost/Banco/Olimpiadas 2000 - 2016.xlsx", sheet = "Athina")
pequim <- read_xlsx("C:/Users/Bruno/OneDrive/Documentos/GitHub/Projeto_Ghost/Banco/Olimpiadas 2000 - 2016.xlsx", sheet = "Beijing")
london <- read_xlsx("C:/Users/Bruno/OneDrive/Documentos/GitHub/Projeto_Ghost/Banco/Olimpiadas 2000 - 2016.xlsx", sheet = "London")
sydney <- read_xlsx("C:/Users/Bruno/OneDrive/Documentos/GitHub/Projeto_Ghost/Banco/Olimpiadas 2000 - 2016.xlsx", sheet = "Sydney")
rio <- read_xlsx("C:/Users/Bruno/OneDrive/Documentos/GitHub/Projeto_Ghost/Banco/Olimpiadas 2000 - 2016.xlsx", sheet = "Rio de Janeiro")
# atribuindo o ano de cada olimpiada
atenas <- atenas %>%
mutate(Ano = 2004)
pequim <- pequim %>%
mutate(Ano = 2008) %>%
rename(`Height (cm)` = Height,
`Weight (lbs)` = Weight,
Gender = Sex)
sydney <- sydney %>%
mutate(Ano = 2000) %>%
rename(Names = N4m3,
Gender = `S3x`,
Age = `4g3`,
`Height (cm)` = H31ght,
`Weight (lbs)` = W31ght,
Team = T34m,
Sport = Sp0rt,
Event = `3v3nt`,
Medal = M3d4l)
london <- london %>%
mutate(Ano = 2012) %>%
rename(Names = Name,
`Height (cm)` = Height,
`Weight (lbs)` = Weight,
Gender = Sex)
rio <- rio %>%
mutate(Ano =  2016) %>%
rename(Names = Name,
Gender = Sex,
`Height (cm)` = Height_cm,
`Weight (lbs)` =Weight_lbs,
Team = Country,
Age = Age_year)
# unindo os bancos de dados
dados_brutos <- bind_rows(atenas, pequim, sydney, london, rio)
# limpando os nao medalhistas
dados_filtrados <- dados_brutos %>%
filter(Medal != "NA")
medalhistas <- dados_filtrados %>%
select(Names, Medal) %>%
group_by(Names) %>%
summarise(total_med = n()) %>%
top_n(3, total_med)
top_med <- dados_filtrados %>%
filter(Names %in% medalhistas$Names) %>%
group_by(Names, Medal) %>%
summarise(quantidade = n()) %>%
ungroup()
########## Fazer grafico para visualizar
############ chi quadrado
tabela_chi <- xtabs(quantidade ~ Names + Medal, data = top_med)
tabela_chi
# Criar a tabela de contingência
tabela_chi <- matrix(c(2, 23, 3, 5, 3, 4, 3, 6, 3), nrow = 3, byrow = TRUE)
# Definir os nomes das linhas (medalhistas) e colunas (medalhas)
rownames(tabela_chi) <- c("Michael Fred Phelps, II", "Natalie Anne Coughlin (-Hall)", "Ryan Steven Lochte")
colnames(tabela_chi) <- c("Bronze", "Ouro", "Prata")
# Executar o teste qui-quadrado
resultado <- chisq.test(tabela_chi)
# Exibir o resultado
resultado
View(tabela_chi)
medalhistas <- dados_filtrados %>%
select(Names, Medal) %>%
group_by(Names) %>%
summarise(total_med = n()) %>%
top_n(3, total_med)
top_med <- dados_filtrados %>%
filter(Names %in% medalhistas$Names) %>%
group_by(Names, Medal) %>%
summarise(quantidade = n()) %>%
ungroup()
########## Fazer grafico para visualizar
############ chi quadrado
tabela_chi <- xtabs(quantidade ~ Names + Medal, data = top_med)
chisq.test(tabela_chi)
View(top_med)
# Executar o teste qui-quadrado
resultado <- fisher.test(tabela_chi)
# Exibir o resultado
resultado
top_med
medalhistas
top_med <- dados_filtrados %>%
filter(Names %in% medalhistas$Names) %>%
group_by(Names, Medal) %>%
summarise(quantidade = n())
top_med <- dados_filtrados %>%
filter(Names %in% medalhistas$Names) %>%
group_by(Names, Medal) %>%
summarise(quantidade = n()) %>%
ungroup()
top_med <- dados_filtrados %>%
filter(Names %in% medalhistas$Names) %>%
group_by(Names, Medal) %>%
summarise(quantidade = n()) %>%
ungroup()
top_med
top_med <- dados_filtrados %>%
filter(Names %in% medalhistas$Names) %>%
group_by(Names, Medal) %>%
summarise(quantidade = n(), .groups = "drop")
top_med
top_med <- dados_filtrados %>%
filter(Names %in% medalhistas$Names) %>%
group_by(Names, Medal) %>%
summarise(quantidade = n(), .groups = "drop") %>%
mutate(
freq_relativa = round(quantidade / sum(quantidade) * 100, 1)
)
top_med
top_med <- dados_filtrados %>%
filter(Names %in% medalhistas$Names) %>%
group_by(Names, Medal) %>%
summarise(quantidade = n(), .groups = "drop") %>%
group_by(Names)
top_med <- dados_filtrados %>%
filter(Names %in% medalhistas$Names) %>%
group_by(Names, Medal) %>%
summarise(quantidade = n(), .groups = "drop") %>%
group_by(Names) %>%
mutate(
freq_relativa = round(quantidade / sum(quantidade) * 100, 1)
)
top_med
top_med <- dados_filtrados %>%
filter(Names %in% medalhistas$Names) %>%
group_by(Names, Medal) %>%
summarise(quantidade = n(), .groups = "drop") %>%
group_by(Names) %>%
mutate(
freq_relativa = round(quantidade / sum(quantidade) * 100, 2)
)
top_med
top_med <- dados_filtrados %>%
filter(Names %in% medalhistas$Names) %>%
group_by(Names, Medal) %>%
summarise(quantidade = n(), .groups = "drop") %>%
group_by(Names) %>%
mutate(
freq_relativa = round(quantidade / sum(quantidade) * 100, 2)
)
top_med
top_med <- dados_filtrados %>%
filter(Names %in% medalhistas$Names) %>%
group_by(Names, Medal) %>%
summarise(quantidade = n(), .groups = "drop") %>%
group_by(Names) %>%
mutate(
freq_relativa = round(quantidade / sum(quantidade) * 100,2)
)
top_med
top_med <- dados_filtrados %>%
filter(Names %in% medalhistas$Names) %>%
group_by(Names, Medal) %>%
summarise(quantidade = n(), .groups = "drop") %>%
group_by(Names) %>%
mutate(
freq_relativa = round(quantidade / sum(quantidade) * 100, 2)
)
top_med
porcentagens <- str_c(top_med$freq_relativa, "%") %>% str_replace("
\\.", ",")
legendas <- str_squish(str_c(top_med$freq, " (", porcentagens, ")")
)
legendas <- str_squish(str_c(top_med$quantidade, " (", porcentagens, ")")
)
top_med
View(top_med)
top_med %>%
ggplot(aes(
x = fct_reorder(Names, quantidade, .desc = T), y = quantidade,
fill = Medal, label = legendas
)) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = .9),
vjust = -0.5, hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência") +
theme_estat()
theme_estat <- function(...) {
theme <- ggplot2::theme_bw() +
ggplot2::theme(
axis.title.y = ggplot2::element_text(colour = "black", size = 10),
axis.title.x = ggplot2::element_text(colour = "black", size = 10),
axis.text = ggplot2::element_text(colour = "black", size = 10),
panel.border = ggplot2::element_blank(),
axis.line = ggplot2::element_line(colour = "black"),
text = element_text(family = "sans", size = 12),
legend.position = "top",
...
)
return(
list(
theme,
scale_fill_manual(values = cores_estat),
scale_colour_manual(values = cores_estat),
scale_y_continuous(
labels = scales::number_format(decimal.mark = ',',
#accuracy = 0.01,
big.mark = "."))
)
)
}
top_med %>%
ggplot(aes(
x = fct_reorder(Names, quantidade, .desc = T), y = quantidade,
fill = Medal, label = legendas
)) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = .9),
vjust = -0.5, hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência") +
theme_estat()
# Definindo paleta de cores da Estat
cores_estat <- c(
"#A11D21", "#003366", "#CC9900", "#663333", "#FF6600",
"#CC9966", "#999966", "#006606", "#008091", "#041835",
"#666666")
top_med %>%
ggplot(aes(
x = fct_reorder(Names, quantidade, .desc = T), y = quantidade,
fill = Medal, label = legendas
)) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = .9),
vjust = -0.5, hjust = 0.5,
size = 3
) +
labs(x = "Atletas", y = "Frequência") +
theme_estat()
ggsave("colunas-bi-freq.png", width = 158, height = 93, units = "mm")
ggsave("colunas-bi-freq.png", width = 158, height = 93, units = "mm", path = "resultados/images")
ggsave("colunas-bi-freq.png", width = 158, height = 93, units = "mm", path = "rdocs/images")
setwd("~/Projeto_Ghost")
ggsave("colunas-bi-freq.png", width = 158, height = 93, units = "mm", path = "rdocs/images")
ggsave("colunas-bi-freq.png", width = 158, height = 93, units = "mm", path = "Projeto_Ghost/rdocs/images")
ggsave("colunas-bi-freq.png", width = 158, height = 93, units = "mm")
ggsave("colunas-bi-freq.png", width = 158, height = 93, units = "mm", path = "C:/Users/Bruno/OneDrive/Documentos/GitHub/Projeto_Ghost/rdocs/images")
